import React from "react";

const ReactRouter = require("react-router-dom");
let Router;
if (typeof window !== typeof undefined) {
  const { BrowserRouter } = ReactRouter;
  Router = BrowserRouter;
} else {
  // If we are in SSR.
  const { StaticRouter } = ReactRouter;
  Router = StaticRouter;
  /* with the StaticRouter, we are in a stateless environment, where we render all routes with a fixed location. The StaticRouter does not allow for the location to be changed by redirects, since no user interaction can happen when using server-side rendering. */
}
const { Route, Redirect, Switch } = ReactRouter;

import { LoginRegisterForm } from "./components/LoginRegister";
import { Main } from "./Main";
import { User } from "./User";

export const Routing = ({ loggedIn, changeLoginState, location, context }) => (
  <Router context={context} location={location}>
    <Switch>
      <PrivateRoute
        path="/app"
        component={() => <Main changeLoginState={changeLoginState} />}
        loggedIn={loggedIn}
      />
      <PrivateRoute
        path="/user/:username"
        component={(props) => (
          <User {...props} changeLoginState={changeLoginState} />
        )}
        loggedIn={loggedIn}
      />
      <LoginRoute
        exact
        path="/"
        component={() => (
          <LoginRegisterForm changeLoginState={changeLoginState} />
        )}
        loggedIn={loggedIn}
      />
      <Route component={NotFound} />
    </Switch>
  </Router>
);

const PrivateRoute = ({ component: Component, ...rest }) => (
  <Route
    {...rest}
    render={(props) =>
      rest.loggedIn === true ? (
        <Component {...props} />
      ) : (
        <Redirect
          to={{
            pathname: "/",
            state: { from: props.location }, // keep track of the url before redirect to main page. Its holds the last matched path in the props.location field generated by React Router
          }}
        />
      )
    }
  />
);

const LoginRoute = ({ component: Component, ...rest }) => (
  <Route
    {...rest}
    render={(props) =>
      rest.loggedIn === false ? (
        <Component {...props} />
      ) : (
        <Redirect
          to={{
            pathname:
              typeof props.location.state !== typeof undefined
                ? props.location.state.from.pathname
                : "/app",
          }}
        />
      )
    }
  />
);

const NotFound = () => {
  <Redirect to="/" />;
};
